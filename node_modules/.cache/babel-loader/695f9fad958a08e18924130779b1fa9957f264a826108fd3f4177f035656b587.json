{"ast":null,"code":"import _objectSpread from\"C:/Users/Ben/VSCode/Parm/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Define relationship rules between metrics\n// Example relationship rules - these can be expanded based on business logic\nconst relationshipRules=[// Financial relationships\n{sourceMetric:'total_revenue',targetMetrics:[{metricId:'revenue_growth',categoryId:'financial',subcategoryId:'revenue',factor:0.8},{metricId:'profit_margin',categoryId:'financial',subcategoryId:'revenue',factor:0.3}]},{sourceMetric:'customer_lifetime_value',targetMetrics:[{metricId:'recurring_revenue',categoryId:'financial',subcategoryId:'revenue',factor:0.7},{metricId:'churn_rate',categoryId:'financial',subcategoryId:'revenue',factor:-0.5}]},// Customer experience relationships\n{sourceMetric:'nps_score',targetMetrics:[{metricId:'csat_score',categoryId:'customer',subcategoryId:'satisfaction',factor:0.9},{metricId:'retention_rate',categoryId:'customer',subcategoryId:'engagement',factor:0.6},{metricId:'churn_rate',categoryId:'financial',subcategoryId:'revenue',factor:-0.4}]},{sourceMetric:'support_quality',targetMetrics:[{metricId:'response_time',categoryId:'customer',subcategoryId:'satisfaction',factor:0.7},{metricId:'resolution_rate',categoryId:'customer',subcategoryId:'satisfaction',factor:0.8}]},// Product quality relationships\n{sourceMetric:'defect_rate',targetMetrics:[{metricId:'uptime',categoryId:'product',subcategoryId:'quality',factor:-0.6},{metricId:'performance',categoryId:'product',subcategoryId:'quality',factor:-0.5},{metricId:'nps_score',categoryId:'customer',subcategoryId:'satisfaction',factor:-0.3}]},{sourceMetric:'uptime',targetMetrics:[{metricId:'nps_score',categoryId:'customer',subcategoryId:'satisfaction',factor:0.4},{metricId:'customer_effort',categoryId:'customer',subcategoryId:'satisfaction',factor:0.3}]},// Team performance relationships\n{sourceMetric:'velocity',targetMetrics:[{metricId:'efficiency',categoryId:'team',subcategoryId:'productivity',factor:0.8},{metricId:'feature_velocity',categoryId:'product',subcategoryId:'innovation',factor:0.7}]},{sourceMetric:'employee_nps',targetMetrics:[{metricId:'retention_rate',categoryId:'team',subcategoryId:'satisfaction',factor:0.8},{metricId:'collaboration',categoryId:'team',subcategoryId:'productivity',factor:0.6},{metricId:'quality_score',categoryId:'team',subcategoryId:'productivity',factor:0.5}]},// Technology relationships\n{sourceMetric:'system_reliability',targetMetrics:[{metricId:'uptime',categoryId:'product',subcategoryId:'quality',factor:0.9},{metricId:'performance_metrics',categoryId:'technology',subcategoryId:'infrastructure',factor:0.7}]},{sourceMetric:'automation_level',targetMetrics:[{metricId:'process_automation',categoryId:'financial',subcategoryId:'efficiency',factor:0.8},{metricId:'efficiency',categoryId:'team',subcategoryId:'productivity',factor:0.6},{metricId:'operating_costs',categoryId:'financial',subcategoryId:'costs',factor:-0.4}]},// Market position relationships\n{sourceMetric:'market_share',targetMetrics:[{metricId:'competitive_position',categoryId:'market',subcategoryId:'competition',factor:0.8},{metricId:'brand_recognition',categoryId:'market',subcategoryId:'competition',factor:0.6},{metricId:'total_revenue',categoryId:'financial',subcategoryId:'revenue',factor:0.5}]},{sourceMetric:'product_market_fit',targetMetrics:[{metricId:'nps_score',categoryId:'customer',subcategoryId:'satisfaction',factor:0.7},{metricId:'customer_preference',categoryId:'market',subcategoryId:'competition',factor:0.8},{metricId:'revenue_growth',categoryId:'financial',subcategoryId:'revenue',factor:0.6}]}];export function applyRelationships(categories,changedCategoryId,changedSubcategoryId,changedMetricId,newValue){// Find the rule that applies to the changed metric\nconst applicableRule=relationshipRules.find(rule=>rule.sourceMetric===changedMetricId);if(!applicableRule){return categories;}// Calculate the change in value\nconst oldValue=findMetricValue(categories,changedCategoryId,changedSubcategoryId,changedMetricId);const valueChange=newValue-oldValue;if(valueChange===0){return categories;}// Apply the relationship rules\nlet updatedCategories=[...categories];applicableRule.targetMetrics.forEach(target=>{const currentValue=findMetricValue(updatedCategories,target.categoryId,target.subcategoryId,target.metricId);const newTargetValue=Math.max(0,Math.min(10,currentValue+valueChange*target.factor));updatedCategories=updateMetricValue(updatedCategories,target.categoryId,target.subcategoryId,target.metricId,newTargetValue);});return updatedCategories;}function findMetricValue(categories,categoryId,subcategoryId,metricId){const category=categories.find(c=>c.id===categoryId);if(!category)return 0;const subcategory=category.subcategories.find(s=>s.id===subcategoryId);if(!subcategory)return 0;const metric=subcategory.metrics.find(m=>m.id===metricId);return metric?metric.value:0;}function updateMetricValue(categories,categoryId,subcategoryId,metricId,newValue){return categories.map(category=>{if(category.id!==categoryId)return category;return _objectSpread(_objectSpread({},category),{},{subcategories:category.subcategories.map(subcategory=>{if(subcategory.id!==subcategoryId)return subcategory;return _objectSpread(_objectSpread({},subcategory),{},{metrics:subcategory.metrics.map(metric=>{if(metric.id!==metricId)return metric;return _objectSpread(_objectSpread({},metric),{},{value:newValue});})});})});});}// Helper function to calculate averages\nexport function calculateSubcategoryAverage(metrics){if(metrics.length===0)return 0;const sum=metrics.reduce((acc,metric)=>acc+metric.value,0);return Math.round(sum/metrics.length*10)/10;// Round to 1 decimal place\n}export function calculateCategoryAverage(subcategories){if(subcategories.length===0)return 0;const subcategoryAverages=subcategories.map(sub=>calculateSubcategoryAverage(sub.metrics));const sum=subcategoryAverages.reduce((acc,avg)=>acc+avg,0);return Math.round(sum/subcategoryAverages.length*10)/10;// Round to 1 decimal place\n}","map":{"version":3,"names":["relationshipRules","sourceMetric","targetMetrics","metricId","categoryId","subcategoryId","factor","applyRelationships","categories","changedCategoryId","changedSubcategoryId","changedMetricId","newValue","applicableRule","find","rule","oldValue","findMetricValue","valueChange","updatedCategories","forEach","target","currentValue","newTargetValue","Math","max","min","updateMetricValue","category","c","id","subcategory","subcategories","s","metric","metrics","m","value","map","_objectSpread","calculateSubcategoryAverage","length","sum","reduce","acc","round","calculateCategoryAverage","subcategoryAverages","sub","avg"],"sources":["C:/Users/Ben/VSCode/Parm/src/utils/relationships.ts"],"sourcesContent":["import { KPICategory } from '../contexts/KPIContext';\r\n\r\n// Define relationship rules between metrics\r\ninterface RelationshipRule {\r\n  sourceMetric: string;\r\n  targetMetrics: Array<{\r\n    metricId: string;\r\n    categoryId: string;\r\n    subcategoryId: string;\r\n    factor: number; // How much the target should change relative to source\r\n    minValue?: number;\r\n    maxValue?: number;\r\n  }>;\r\n}\r\n\r\n// Example relationship rules - these can be expanded based on business logic\r\nconst relationshipRules: RelationshipRule[] = [\r\n  // Financial relationships\r\n  {\r\n    sourceMetric: 'total_revenue',\r\n    targetMetrics: [\r\n      { metricId: 'revenue_growth', categoryId: 'financial', subcategoryId: 'revenue', factor: 0.8 },\r\n      { metricId: 'profit_margin', categoryId: 'financial', subcategoryId: 'revenue', factor: 0.3 },\r\n    ]\r\n  },\r\n  {\r\n    sourceMetric: 'customer_lifetime_value',\r\n    targetMetrics: [\r\n      { metricId: 'recurring_revenue', categoryId: 'financial', subcategoryId: 'revenue', factor: 0.7 },\r\n      { metricId: 'churn_rate', categoryId: 'financial', subcategoryId: 'revenue', factor: -0.5 },\r\n    ]\r\n  },\r\n  \r\n  // Customer experience relationships\r\n  {\r\n    sourceMetric: 'nps_score',\r\n    targetMetrics: [\r\n      { metricId: 'csat_score', categoryId: 'customer', subcategoryId: 'satisfaction', factor: 0.9 },\r\n      { metricId: 'retention_rate', categoryId: 'customer', subcategoryId: 'engagement', factor: 0.6 },\r\n      { metricId: 'churn_rate', categoryId: 'financial', subcategoryId: 'revenue', factor: -0.4 },\r\n    ]\r\n  },\r\n  {\r\n    sourceMetric: 'support_quality',\r\n    targetMetrics: [\r\n      { metricId: 'response_time', categoryId: 'customer', subcategoryId: 'satisfaction', factor: 0.7 },\r\n      { metricId: 'resolution_rate', categoryId: 'customer', subcategoryId: 'satisfaction', factor: 0.8 },\r\n    ]\r\n  },\r\n  \r\n  // Product quality relationships\r\n  {\r\n    sourceMetric: 'defect_rate',\r\n    targetMetrics: [\r\n      { metricId: 'uptime', categoryId: 'product', subcategoryId: 'quality', factor: -0.6 },\r\n      { metricId: 'performance', categoryId: 'product', subcategoryId: 'quality', factor: -0.5 },\r\n      { metricId: 'nps_score', categoryId: 'customer', subcategoryId: 'satisfaction', factor: -0.3 },\r\n    ]\r\n  },\r\n  {\r\n    sourceMetric: 'uptime',\r\n    targetMetrics: [\r\n      { metricId: 'nps_score', categoryId: 'customer', subcategoryId: 'satisfaction', factor: 0.4 },\r\n      { metricId: 'customer_effort', categoryId: 'customer', subcategoryId: 'satisfaction', factor: 0.3 },\r\n    ]\r\n  },\r\n  \r\n  // Team performance relationships\r\n  {\r\n    sourceMetric: 'velocity',\r\n    targetMetrics: [\r\n      { metricId: 'efficiency', categoryId: 'team', subcategoryId: 'productivity', factor: 0.8 },\r\n      { metricId: 'feature_velocity', categoryId: 'product', subcategoryId: 'innovation', factor: 0.7 },\r\n    ]\r\n  },\r\n  {\r\n    sourceMetric: 'employee_nps',\r\n    targetMetrics: [\r\n      { metricId: 'retention_rate', categoryId: 'team', subcategoryId: 'satisfaction', factor: 0.8 },\r\n      { metricId: 'collaboration', categoryId: 'team', subcategoryId: 'productivity', factor: 0.6 },\r\n      { metricId: 'quality_score', categoryId: 'team', subcategoryId: 'productivity', factor: 0.5 },\r\n    ]\r\n  },\r\n  \r\n  // Technology relationships\r\n  {\r\n    sourceMetric: 'system_reliability',\r\n    targetMetrics: [\r\n      { metricId: 'uptime', categoryId: 'product', subcategoryId: 'quality', factor: 0.9 },\r\n      { metricId: 'performance_metrics', categoryId: 'technology', subcategoryId: 'infrastructure', factor: 0.7 },\r\n    ]\r\n  },\r\n  {\r\n    sourceMetric: 'automation_level',\r\n    targetMetrics: [\r\n      { metricId: 'process_automation', categoryId: 'financial', subcategoryId: 'efficiency', factor: 0.8 },\r\n      { metricId: 'efficiency', categoryId: 'team', subcategoryId: 'productivity', factor: 0.6 },\r\n      { metricId: 'operating_costs', categoryId: 'financial', subcategoryId: 'costs', factor: -0.4 },\r\n    ]\r\n  },\r\n  \r\n  // Market position relationships\r\n  {\r\n    sourceMetric: 'market_share',\r\n    targetMetrics: [\r\n      { metricId: 'competitive_position', categoryId: 'market', subcategoryId: 'competition', factor: 0.8 },\r\n      { metricId: 'brand_recognition', categoryId: 'market', subcategoryId: 'competition', factor: 0.6 },\r\n      { metricId: 'total_revenue', categoryId: 'financial', subcategoryId: 'revenue', factor: 0.5 },\r\n    ]\r\n  },\r\n  {\r\n    sourceMetric: 'product_market_fit',\r\n    targetMetrics: [\r\n      { metricId: 'nps_score', categoryId: 'customer', subcategoryId: 'satisfaction', factor: 0.7 },\r\n      { metricId: 'customer_preference', categoryId: 'market', subcategoryId: 'competition', factor: 0.8 },\r\n      { metricId: 'revenue_growth', categoryId: 'financial', subcategoryId: 'revenue', factor: 0.6 },\r\n    ]\r\n  }\r\n];\r\n\r\nexport function applyRelationships(\r\n  categories: KPICategory[],\r\n  changedCategoryId: string,\r\n  changedSubcategoryId: string,\r\n  changedMetricId: string,\r\n  newValue: number\r\n): KPICategory[] {\r\n  // Find the rule that applies to the changed metric\r\n  const applicableRule = relationshipRules.find(rule => rule.sourceMetric === changedMetricId);\r\n  \r\n  if (!applicableRule) {\r\n    return categories;\r\n  }\r\n\r\n  // Calculate the change in value\r\n  const oldValue = findMetricValue(categories, changedCategoryId, changedSubcategoryId, changedMetricId);\r\n  const valueChange = newValue - oldValue;\r\n\r\n  if (valueChange === 0) {\r\n    return categories;\r\n  }\r\n\r\n  // Apply the relationship rules\r\n  let updatedCategories = [...categories];\r\n  \r\n  applicableRule.targetMetrics.forEach(target => {\r\n    const currentValue = findMetricValue(updatedCategories, target.categoryId, target.subcategoryId, target.metricId);\r\n    const newTargetValue = Math.max(0, Math.min(10, currentValue + (valueChange * target.factor)));\r\n    \r\n    updatedCategories = updateMetricValue(\r\n      updatedCategories,\r\n      target.categoryId,\r\n      target.subcategoryId,\r\n      target.metricId,\r\n      newTargetValue\r\n    );\r\n  });\r\n\r\n  return updatedCategories;\r\n}\r\n\r\nfunction findMetricValue(\r\n  categories: KPICategory[],\r\n  categoryId: string,\r\n  subcategoryId: string,\r\n  metricId: string\r\n): number {\r\n  const category = categories.find(c => c.id === categoryId);\r\n  if (!category) return 0;\r\n  \r\n  const subcategory = category.subcategories.find(s => s.id === subcategoryId);\r\n  if (!subcategory) return 0;\r\n  \r\n  const metric = subcategory.metrics.find(m => m.id === metricId);\r\n  return metric ? metric.value : 0;\r\n}\r\n\r\nfunction updateMetricValue(\r\n  categories: KPICategory[],\r\n  categoryId: string,\r\n  subcategoryId: string,\r\n  metricId: string,\r\n  newValue: number\r\n): KPICategory[] {\r\n  return categories.map(category => {\r\n    if (category.id !== categoryId) return category;\r\n    \r\n    return {\r\n      ...category,\r\n      subcategories: category.subcategories.map(subcategory => {\r\n        if (subcategory.id !== subcategoryId) return subcategory;\r\n        \r\n        return {\r\n          ...subcategory,\r\n          metrics: subcategory.metrics.map(metric => {\r\n            if (metric.id !== metricId) return metric;\r\n            return { ...metric, value: newValue };\r\n          })\r\n        };\r\n      })\r\n    };\r\n  });\r\n}\r\n\r\n// Helper function to calculate averages\r\nexport function calculateSubcategoryAverage(metrics: any[]): number {\r\n  if (metrics.length === 0) return 0;\r\n  const sum = metrics.reduce((acc, metric) => acc + metric.value, 0);\r\n  return Math.round((sum / metrics.length) * 10) / 10; // Round to 1 decimal place\r\n}\r\n\r\nexport function calculateCategoryAverage(subcategories: any[]): number {\r\n  if (subcategories.length === 0) return 0;\r\n  const subcategoryAverages = subcategories.map(sub => calculateSubcategoryAverage(sub.metrics));\r\n  const sum = subcategoryAverages.reduce((acc, avg) => acc + avg, 0);\r\n  return Math.round((sum / subcategoryAverages.length) * 10) / 10; // Round to 1 decimal place\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}