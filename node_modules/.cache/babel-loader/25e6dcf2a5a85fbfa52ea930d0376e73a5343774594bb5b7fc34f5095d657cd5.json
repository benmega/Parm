{"ast":null,"code":"// Define relationship rules between metrics\n\n// Example relationship rules - these can be expanded based on business logic\nconst relationshipRules = [\n// Financial relationships\n{\n  sourceMetric: 'total_revenue',\n  targetMetrics: [{\n    metricId: 'revenue_growth',\n    categoryId: 'financial',\n    subcategoryId: 'revenue',\n    factor: 0.8\n  }, {\n    metricId: 'profit_margin',\n    categoryId: 'financial',\n    subcategoryId: 'revenue',\n    factor: 0.3\n  }]\n}, {\n  sourceMetric: 'customer_lifetime_value',\n  targetMetrics: [{\n    metricId: 'recurring_revenue',\n    categoryId: 'financial',\n    subcategoryId: 'revenue',\n    factor: 0.7\n  }, {\n    metricId: 'churn_rate',\n    categoryId: 'financial',\n    subcategoryId: 'revenue',\n    factor: -0.5\n  }]\n},\n// Customer experience relationships\n{\n  sourceMetric: 'nps_score',\n  targetMetrics: [{\n    metricId: 'csat_score',\n    categoryId: 'customer',\n    subcategoryId: 'satisfaction',\n    factor: 0.9\n  }, {\n    metricId: 'retention_rate',\n    categoryId: 'customer',\n    subcategoryId: 'engagement',\n    factor: 0.6\n  }, {\n    metricId: 'churn_rate',\n    categoryId: 'financial',\n    subcategoryId: 'revenue',\n    factor: -0.4\n  }]\n}, {\n  sourceMetric: 'support_quality',\n  targetMetrics: [{\n    metricId: 'response_time',\n    categoryId: 'customer',\n    subcategoryId: 'satisfaction',\n    factor: 0.7\n  }, {\n    metricId: 'resolution_rate',\n    categoryId: 'customer',\n    subcategoryId: 'satisfaction',\n    factor: 0.8\n  }]\n},\n// Product quality relationships\n{\n  sourceMetric: 'defect_rate',\n  targetMetrics: [{\n    metricId: 'uptime',\n    categoryId: 'product',\n    subcategoryId: 'quality',\n    factor: -0.6\n  }, {\n    metricId: 'performance',\n    categoryId: 'product',\n    subcategoryId: 'quality',\n    factor: -0.5\n  }, {\n    metricId: 'nps_score',\n    categoryId: 'customer',\n    subcategoryId: 'satisfaction',\n    factor: -0.3\n  }]\n}, {\n  sourceMetric: 'uptime',\n  targetMetrics: [{\n    metricId: 'nps_score',\n    categoryId: 'customer',\n    subcategoryId: 'satisfaction',\n    factor: 0.4\n  }, {\n    metricId: 'customer_effort',\n    categoryId: 'customer',\n    subcategoryId: 'satisfaction',\n    factor: 0.3\n  }]\n},\n// Team performance relationships\n{\n  sourceMetric: 'velocity',\n  targetMetrics: [{\n    metricId: 'efficiency',\n    categoryId: 'team',\n    subcategoryId: 'productivity',\n    factor: 0.8\n  }, {\n    metricId: 'feature_velocity',\n    categoryId: 'product',\n    subcategoryId: 'innovation',\n    factor: 0.7\n  }]\n}, {\n  sourceMetric: 'employee_nps',\n  targetMetrics: [{\n    metricId: 'retention_rate',\n    categoryId: 'team',\n    subcategoryId: 'satisfaction',\n    factor: 0.8\n  }, {\n    metricId: 'collaboration',\n    categoryId: 'team',\n    subcategoryId: 'productivity',\n    factor: 0.6\n  }, {\n    metricId: 'quality_score',\n    categoryId: 'team',\n    subcategoryId: 'productivity',\n    factor: 0.5\n  }]\n},\n// Technology relationships\n{\n  sourceMetric: 'system_reliability',\n  targetMetrics: [{\n    metricId: 'uptime',\n    categoryId: 'product',\n    subcategoryId: 'quality',\n    factor: 0.9\n  }, {\n    metricId: 'performance_metrics',\n    categoryId: 'technology',\n    subcategoryId: 'infrastructure',\n    factor: 0.7\n  }]\n}, {\n  sourceMetric: 'automation_level',\n  targetMetrics: [{\n    metricId: 'process_automation',\n    categoryId: 'financial',\n    subcategoryId: 'efficiency',\n    factor: 0.8\n  }, {\n    metricId: 'efficiency',\n    categoryId: 'team',\n    subcategoryId: 'productivity',\n    factor: 0.6\n  }, {\n    metricId: 'operating_costs',\n    categoryId: 'financial',\n    subcategoryId: 'costs',\n    factor: -0.4\n  }]\n},\n// Market position relationships\n{\n  sourceMetric: 'market_share',\n  targetMetrics: [{\n    metricId: 'competitive_position',\n    categoryId: 'market',\n    subcategoryId: 'competition',\n    factor: 0.8\n  }, {\n    metricId: 'brand_recognition',\n    categoryId: 'market',\n    subcategoryId: 'competition',\n    factor: 0.6\n  }, {\n    metricId: 'total_revenue',\n    categoryId: 'financial',\n    subcategoryId: 'revenue',\n    factor: 0.5\n  }]\n}, {\n  sourceMetric: 'product_market_fit',\n  targetMetrics: [{\n    metricId: 'nps_score',\n    categoryId: 'customer',\n    subcategoryId: 'satisfaction',\n    factor: 0.7\n  }, {\n    metricId: 'customer_preference',\n    categoryId: 'market',\n    subcategoryId: 'competition',\n    factor: 0.8\n  }, {\n    metricId: 'revenue_growth',\n    categoryId: 'financial',\n    subcategoryId: 'revenue',\n    factor: 0.6\n  }]\n}];\nexport function applyRelationships(categories, changedCategoryId, changedSubcategoryId, changedMetricId, newValue) {\n  // Find the rule that applies to the changed metric\n  const applicableRule = relationshipRules.find(rule => rule.sourceMetric === changedMetricId);\n  if (!applicableRule) {\n    return categories;\n  }\n\n  // Calculate the change in value\n  const oldValue = findMetricValue(categories, changedCategoryId, changedSubcategoryId, changedMetricId);\n  const valueChange = newValue - oldValue;\n  if (valueChange === 0) {\n    return categories;\n  }\n\n  // Apply the relationship rules\n  let updatedCategories = [...categories];\n  applicableRule.targetMetrics.forEach(target => {\n    const currentValue = findMetricValue(updatedCategories, target.categoryId, target.subcategoryId, target.metricId);\n    const newTargetValue = Math.max(0, Math.min(10, currentValue + valueChange * target.factor));\n    updatedCategories = updateMetricValue(updatedCategories, target.categoryId, target.subcategoryId, target.metricId, newTargetValue);\n  });\n  return updatedCategories;\n}\nfunction findMetricValue(categories, categoryId, subcategoryId, metricId) {\n  const category = categories.find(c => c.id === categoryId);\n  if (!category) return 0;\n  const subcategory = category.subcategories.find(s => s.id === subcategoryId);\n  if (!subcategory) return 0;\n  const metric = subcategory.metrics.find(m => m.id === metricId);\n  return metric ? metric.value : 0;\n}\nfunction updateMetricValue(categories, categoryId, subcategoryId, metricId, newValue) {\n  return categories.map(category => {\n    if (category.id !== categoryId) return category;\n    return {\n      ...category,\n      subcategories: category.subcategories.map(subcategory => {\n        if (subcategory.id !== subcategoryId) return subcategory;\n        return {\n          ...subcategory,\n          metrics: subcategory.metrics.map(metric => {\n            if (metric.id !== metricId) return metric;\n            return {\n              ...metric,\n              value: newValue\n            };\n          })\n        };\n      })\n    };\n  });\n}\n\n// Helper function to calculate averages\nexport function calculateSubcategoryAverage(metrics) {\n  if (metrics.length === 0) return 0;\n  const sum = metrics.reduce((acc, metric) => acc + metric.value, 0);\n  return Math.round(sum / metrics.length * 10) / 10; // Round to 1 decimal place\n}\nexport function calculateCategoryAverage(subcategories) {\n  if (subcategories.length === 0) return 0;\n  const subcategoryAverages = subcategories.map(sub => calculateSubcategoryAverage(sub.metrics));\n  const sum = subcategoryAverages.reduce((acc, avg) => acc + avg, 0);\n  return Math.round(sum / subcategoryAverages.length * 10) / 10; // Round to 1 decimal place\n}","map":{"version":3,"names":["relationshipRules","sourceMetric","targetMetrics","metricId","categoryId","subcategoryId","factor","applyRelationships","categories","changedCategoryId","changedSubcategoryId","changedMetricId","newValue","applicableRule","find","rule","oldValue","findMetricValue","valueChange","updatedCategories","forEach","target","currentValue","newTargetValue","Math","max","min","updateMetricValue","category","c","id","subcategory","subcategories","s","metric","metrics","m","value","map","calculateSubcategoryAverage","length","sum","reduce","acc","round","calculateCategoryAverage","subcategoryAverages","sub","avg"],"sources":["C:/Users/Ben/VSCode/Parm/src/utils/relationships.ts"],"sourcesContent":["import { KPICategory } from '../contexts/KPIContext';\r\n\r\n// Define relationship rules between metrics\r\ninterface RelationshipRule {\r\n  sourceMetric: string;\r\n  targetMetrics: Array<{\r\n    metricId: string;\r\n    categoryId: string;\r\n    subcategoryId: string;\r\n    factor: number; // How much the target should change relative to source\r\n    minValue?: number;\r\n    maxValue?: number;\r\n  }>;\r\n}\r\n\r\n// Example relationship rules - these can be expanded based on business logic\r\nconst relationshipRules: RelationshipRule[] = [\r\n  // Financial relationships\r\n  {\r\n    sourceMetric: 'total_revenue',\r\n    targetMetrics: [\r\n      { metricId: 'revenue_growth', categoryId: 'financial', subcategoryId: 'revenue', factor: 0.8 },\r\n      { metricId: 'profit_margin', categoryId: 'financial', subcategoryId: 'revenue', factor: 0.3 },\r\n    ]\r\n  },\r\n  {\r\n    sourceMetric: 'customer_lifetime_value',\r\n    targetMetrics: [\r\n      { metricId: 'recurring_revenue', categoryId: 'financial', subcategoryId: 'revenue', factor: 0.7 },\r\n      { metricId: 'churn_rate', categoryId: 'financial', subcategoryId: 'revenue', factor: -0.5 },\r\n    ]\r\n  },\r\n  \r\n  // Customer experience relationships\r\n  {\r\n    sourceMetric: 'nps_score',\r\n    targetMetrics: [\r\n      { metricId: 'csat_score', categoryId: 'customer', subcategoryId: 'satisfaction', factor: 0.9 },\r\n      { metricId: 'retention_rate', categoryId: 'customer', subcategoryId: 'engagement', factor: 0.6 },\r\n      { metricId: 'churn_rate', categoryId: 'financial', subcategoryId: 'revenue', factor: -0.4 },\r\n    ]\r\n  },\r\n  {\r\n    sourceMetric: 'support_quality',\r\n    targetMetrics: [\r\n      { metricId: 'response_time', categoryId: 'customer', subcategoryId: 'satisfaction', factor: 0.7 },\r\n      { metricId: 'resolution_rate', categoryId: 'customer', subcategoryId: 'satisfaction', factor: 0.8 },\r\n    ]\r\n  },\r\n  \r\n  // Product quality relationships\r\n  {\r\n    sourceMetric: 'defect_rate',\r\n    targetMetrics: [\r\n      { metricId: 'uptime', categoryId: 'product', subcategoryId: 'quality', factor: -0.6 },\r\n      { metricId: 'performance', categoryId: 'product', subcategoryId: 'quality', factor: -0.5 },\r\n      { metricId: 'nps_score', categoryId: 'customer', subcategoryId: 'satisfaction', factor: -0.3 },\r\n    ]\r\n  },\r\n  {\r\n    sourceMetric: 'uptime',\r\n    targetMetrics: [\r\n      { metricId: 'nps_score', categoryId: 'customer', subcategoryId: 'satisfaction', factor: 0.4 },\r\n      { metricId: 'customer_effort', categoryId: 'customer', subcategoryId: 'satisfaction', factor: 0.3 },\r\n    ]\r\n  },\r\n  \r\n  // Team performance relationships\r\n  {\r\n    sourceMetric: 'velocity',\r\n    targetMetrics: [\r\n      { metricId: 'efficiency', categoryId: 'team', subcategoryId: 'productivity', factor: 0.8 },\r\n      { metricId: 'feature_velocity', categoryId: 'product', subcategoryId: 'innovation', factor: 0.7 },\r\n    ]\r\n  },\r\n  {\r\n    sourceMetric: 'employee_nps',\r\n    targetMetrics: [\r\n      { metricId: 'retention_rate', categoryId: 'team', subcategoryId: 'satisfaction', factor: 0.8 },\r\n      { metricId: 'collaboration', categoryId: 'team', subcategoryId: 'productivity', factor: 0.6 },\r\n      { metricId: 'quality_score', categoryId: 'team', subcategoryId: 'productivity', factor: 0.5 },\r\n    ]\r\n  },\r\n  \r\n  // Technology relationships\r\n  {\r\n    sourceMetric: 'system_reliability',\r\n    targetMetrics: [\r\n      { metricId: 'uptime', categoryId: 'product', subcategoryId: 'quality', factor: 0.9 },\r\n      { metricId: 'performance_metrics', categoryId: 'technology', subcategoryId: 'infrastructure', factor: 0.7 },\r\n    ]\r\n  },\r\n  {\r\n    sourceMetric: 'automation_level',\r\n    targetMetrics: [\r\n      { metricId: 'process_automation', categoryId: 'financial', subcategoryId: 'efficiency', factor: 0.8 },\r\n      { metricId: 'efficiency', categoryId: 'team', subcategoryId: 'productivity', factor: 0.6 },\r\n      { metricId: 'operating_costs', categoryId: 'financial', subcategoryId: 'costs', factor: -0.4 },\r\n    ]\r\n  },\r\n  \r\n  // Market position relationships\r\n  {\r\n    sourceMetric: 'market_share',\r\n    targetMetrics: [\r\n      { metricId: 'competitive_position', categoryId: 'market', subcategoryId: 'competition', factor: 0.8 },\r\n      { metricId: 'brand_recognition', categoryId: 'market', subcategoryId: 'competition', factor: 0.6 },\r\n      { metricId: 'total_revenue', categoryId: 'financial', subcategoryId: 'revenue', factor: 0.5 },\r\n    ]\r\n  },\r\n  {\r\n    sourceMetric: 'product_market_fit',\r\n    targetMetrics: [\r\n      { metricId: 'nps_score', categoryId: 'customer', subcategoryId: 'satisfaction', factor: 0.7 },\r\n      { metricId: 'customer_preference', categoryId: 'market', subcategoryId: 'competition', factor: 0.8 },\r\n      { metricId: 'revenue_growth', categoryId: 'financial', subcategoryId: 'revenue', factor: 0.6 },\r\n    ]\r\n  }\r\n];\r\n\r\nexport function applyRelationships(\r\n  categories: KPICategory[],\r\n  changedCategoryId: string,\r\n  changedSubcategoryId: string,\r\n  changedMetricId: string,\r\n  newValue: number\r\n): KPICategory[] {\r\n  // Find the rule that applies to the changed metric\r\n  const applicableRule = relationshipRules.find(rule => rule.sourceMetric === changedMetricId);\r\n  \r\n  if (!applicableRule) {\r\n    return categories;\r\n  }\r\n\r\n  // Calculate the change in value\r\n  const oldValue = findMetricValue(categories, changedCategoryId, changedSubcategoryId, changedMetricId);\r\n  const valueChange = newValue - oldValue;\r\n\r\n  if (valueChange === 0) {\r\n    return categories;\r\n  }\r\n\r\n  // Apply the relationship rules\r\n  let updatedCategories = [...categories];\r\n  \r\n  applicableRule.targetMetrics.forEach(target => {\r\n    const currentValue = findMetricValue(updatedCategories, target.categoryId, target.subcategoryId, target.metricId);\r\n    const newTargetValue = Math.max(0, Math.min(10, currentValue + (valueChange * target.factor)));\r\n    \r\n    updatedCategories = updateMetricValue(\r\n      updatedCategories,\r\n      target.categoryId,\r\n      target.subcategoryId,\r\n      target.metricId,\r\n      newTargetValue\r\n    );\r\n  });\r\n\r\n  return updatedCategories;\r\n}\r\n\r\nfunction findMetricValue(\r\n  categories: KPICategory[],\r\n  categoryId: string,\r\n  subcategoryId: string,\r\n  metricId: string\r\n): number {\r\n  const category = categories.find(c => c.id === categoryId);\r\n  if (!category) return 0;\r\n  \r\n  const subcategory = category.subcategories.find(s => s.id === subcategoryId);\r\n  if (!subcategory) return 0;\r\n  \r\n  const metric = subcategory.metrics.find(m => m.id === metricId);\r\n  return metric ? metric.value : 0;\r\n}\r\n\r\nfunction updateMetricValue(\r\n  categories: KPICategory[],\r\n  categoryId: string,\r\n  subcategoryId: string,\r\n  metricId: string,\r\n  newValue: number\r\n): KPICategory[] {\r\n  return categories.map(category => {\r\n    if (category.id !== categoryId) return category;\r\n    \r\n    return {\r\n      ...category,\r\n      subcategories: category.subcategories.map(subcategory => {\r\n        if (subcategory.id !== subcategoryId) return subcategory;\r\n        \r\n        return {\r\n          ...subcategory,\r\n          metrics: subcategory.metrics.map(metric => {\r\n            if (metric.id !== metricId) return metric;\r\n            return { ...metric, value: newValue };\r\n          })\r\n        };\r\n      })\r\n    };\r\n  });\r\n}\r\n\r\n// Helper function to calculate averages\r\nexport function calculateSubcategoryAverage(metrics: any[]): number {\r\n  if (metrics.length === 0) return 0;\r\n  const sum = metrics.reduce((acc, metric) => acc + metric.value, 0);\r\n  return Math.round((sum / metrics.length) * 10) / 10; // Round to 1 decimal place\r\n}\r\n\r\nexport function calculateCategoryAverage(subcategories: any[]): number {\r\n  if (subcategories.length === 0) return 0;\r\n  const subcategoryAverages = subcategories.map(sub => calculateSubcategoryAverage(sub.metrics));\r\n  const sum = subcategoryAverages.reduce((acc, avg) => acc + avg, 0);\r\n  return Math.round((sum / subcategoryAverages.length) * 10) / 10; // Round to 1 decimal place\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}