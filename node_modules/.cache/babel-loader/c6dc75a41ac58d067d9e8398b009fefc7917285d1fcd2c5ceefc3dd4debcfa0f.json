{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ben\\\\VSCode\\\\Parm\\\\src\\\\components\\\\KPIDashboard.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useKPI } from '../contexts/KPIContext';\nimport CategoryPanel from './CategoryPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst KPIDashboard = () => {\n  _s();\n  const {\n    state\n  } = useKPI();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space-y-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white rounded-lg shadow-sm p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold text-gray-900 mb-4\",\n        children: \"KPI Overview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\",\n        children: state.categories.map(category => {\n          const average = calculateCategoryAverage(category.subcategories);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-gray-50 rounded-lg p-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"text-sm font-medium text-gray-600 mb-1\",\n              children: category.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 19,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-2xl font-bold text-gray-900\",\n              children: average.toFixed(1)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 22,\n              columnNumber: 17\n            }, this)]\n          }, category.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-6\",\n      children: state.categories.map(category => /*#__PURE__*/_jsxDEV(CategoryPanel, {\n        category: category\n      }, category.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n\n// Helper function to calculate category average\n_s(KPIDashboard, \"gBGMUmOXczT2V2umcL/RAm4B+eE=\", false, function () {\n  return [useKPI];\n});\n_c = KPIDashboard;\nfunction calculateCategoryAverage(subcategories) {\n  if (subcategories.length === 0) return 0;\n  const subcategoryAverages = subcategories.map(sub => {\n    const sum = sub.metrics.reduce((acc, metric) => acc + metric.value, 0);\n    return sum / sub.metrics.length;\n  });\n  const sum = subcategoryAverages.reduce((acc, avg) => acc + avg, 0);\n  return sum / subcategoryAverages.length;\n}\nexport default KPIDashboard;\nvar _c;\n$RefreshReg$(_c, \"KPIDashboard\");","map":{"version":3,"names":["React","useKPI","CategoryPanel","jsxDEV","_jsxDEV","KPIDashboard","_s","state","className","children","fileName","_jsxFileName","lineNumber","columnNumber","categories","map","category","average","calculateCategoryAverage","subcategories","name","toFixed","id","_c","length","subcategoryAverages","sub","sum","metrics","reduce","acc","metric","value","avg","$RefreshReg$"],"sources":["C:/Users/Ben/VSCode/Parm/src/components/KPIDashboard.tsx"],"sourcesContent":["import React from 'react';\r\nimport { useKPI } from '../contexts/KPIContext';\r\nimport CategoryPanel from './CategoryPanel';\r\n\r\nconst KPIDashboard: React.FC = () => {\r\n  const { state } = useKPI();\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n        <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">\r\n          KPI Overview\r\n        </h2>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n          {state.categories.map(category => {\r\n            const average = calculateCategoryAverage(category.subcategories);\r\n            return (\r\n              <div key={category.id} className=\"bg-gray-50 rounded-lg p-4\">\r\n                <h3 className=\"text-sm font-medium text-gray-600 mb-1\">\r\n                  {category.name}\r\n                </h3>\r\n                <p className=\"text-2xl font-bold text-gray-900\">\r\n                  {average.toFixed(1)}\r\n                </p>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"space-y-6\">\r\n        {state.categories.map(category => (\r\n          <CategoryPanel key={category.id} category={category} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Helper function to calculate category average\r\nfunction calculateCategoryAverage(subcategories: any[]): number {\r\n  if (subcategories.length === 0) return 0;\r\n  const subcategoryAverages = subcategories.map(sub => {\r\n    const sum = sub.metrics.reduce((acc: number, metric: any) => acc + metric.value, 0);\r\n    return sum / sub.metrics.length;\r\n  });\r\n  const sum = subcategoryAverages.reduce((acc, avg) => acc + avg, 0);\r\n  return sum / subcategoryAverages.length;\r\n}\r\n\r\nexport default KPIDashboard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}